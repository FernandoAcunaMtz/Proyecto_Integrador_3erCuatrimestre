const axios = require('axios');

// Configuraci√≥n de URLs
const SERVER_URL = 'http://localhost:5501';
const CHATBOT_URL = 'http://localhost:5502';
const CHATBOT_ENDPOINT = `${SERVER_URL}/chatbot/chat`;

// Funci√≥n para verificar si un servidor est√° respondiendo
async function verificarServidor(url, nombre) {
    try {
        console.log(`üîç Verificando ${nombre} en ${url}...`);
        const response = await axios.get(url, { timeout: 5000 });
        console.log(`‚úÖ ${nombre} est√° funcionando correctamente`);
        console.log(`   Status: ${response.status}`);
        return true;
    } catch (error) {
        console.log(`‚ùå ${nombre} no est√° respondiendo`);
        if (error.code === 'ECONNREFUSED') {
            console.log(`   Error: Conexi√≥n rechazada - El servidor no est√° ejecut√°ndose`);
        } else if (error.code === 'ENOTFOUND') {
            console.log(`   Error: No se puede encontrar el host`);
        } else {
            console.log(`   Error: ${error.message}`);
        }
        return false;
    }
}

// Funci√≥n para probar el endpoint del chatbot
async function probarChatbot() {
    try {
        console.log(`\nü§ñ Probando endpoint del chatbot...`);
        
        const testMessage = {
            message: "Hola, ¬øc√≥mo est√°s?",
            currentPage: "/index.html",
            userRole: "guest",
            chatHistory: []
        };

        const response = await axios.post(CHATBOT_ENDPOINT, testMessage, {
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: 10000
        });

        console.log(`‚úÖ Chatbot responde correctamente`);
        console.log(`   Status: ${response.status}`);
        console.log(`   Respuesta: ${response.data.response.substring(0, 100)}...`);
        
        return true;
    } catch (error) {
        console.log(`‚ùå Error al probar el chatbot`);
        if (error.response) {
            console.log(`   Status: ${error.response.status}`);
            console.log(`   Error: ${error.response.data.error || error.response.statusText}`);
        } else {
            console.log(`   Error: ${error.message}`);
        }
        return false;
    }
}

// Funci√≥n principal
async function verificarChatbot() {
    console.log('üöÄ Iniciando verificaci√≥n del chatbot...\n');
    
    // Verificar servidor principal
    const servidorPrincipal = await verificarServidor(SERVER_URL, 'Servidor Principal');
    
    // Verificar servidor del chatbot (si est√° separado)
    const servidorChatbot = await verificarServidor(CHATBOT_URL, 'Servidor del Chatbot');
    
    // Probar endpoint del chatbot
    const chatbotFunciona = await probarChatbot();
    
    // Resumen
    console.log('\nüìä RESUMEN DE VERIFICACI√ìN:');
    console.log('========================');
    console.log(`Servidor Principal (5501): ${servidorPrincipal ? '‚úÖ Funcionando' : '‚ùå No disponible'}`);
    console.log(`Servidor Chatbot (5502): ${servidorChatbot ? '‚úÖ Funcionando' : '‚ùå No disponible'}`);
    console.log(`Endpoint Chatbot: ${chatbotFunciona ? '‚úÖ Funcionando' : '‚ùå No disponible'}`);
    
    if (servidorPrincipal && chatbotFunciona) {
        console.log('\nüéâ ¬°El chatbot est√° completamente conectado y funcionando!');
    } else if (servidorPrincipal && !chatbotFunciona) {
        console.log('\n‚ö†Ô∏è  El servidor principal funciona pero el chatbot tiene problemas');
        console.log('   Recomendaci√≥n: Verificar la configuraci√≥n del chatbot');
    } else {
        console.log('\nüö® El chatbot no est√° funcionando correctamente');
        console.log('   Recomendaci√≥n: Iniciar los servidores necesarios');
    }
}

// Ejecutar verificaci√≥n
verificarChatbot().catch(console.error);
